#!/usr/bin/python3
import imaplib
import time
import email
import re
import random
from netrc import netrc


def folders():
    typ, data = M.list()
    assert typ == 'OK'
    for l in data:
        l = l.decode('utf-8')
        flags, delim, name = l.split(' ')
        yield name


def number(mailbox):
    typ, data = M.select(mailbox)
    assert typ == 'OK'
    return int(data[0])


def move_all(src, dest):
    typ, _ = M.select(src)
    assert typ == 'OK'

    typ, data = M.uid('SEARCH', None, 'ALL')
    assert typ == 'OK'
    uids = data[0].decode('utf-8').split()
    if uids:
        typ, data = M.uid('MOVE', ','.join(uids), dest)
        assert typ == 'OK'


def mark_all_read(mailbox):
    typ, _ = M.select(mailbox)
    assert typ == 'OK'

    typ, data = M.uid('SEARCH', None, 'UNSEEN')
    assert typ == 'OK'
    uids = data[0].decode('utf-8').split()
    if uids:
        typ, data = M.uid('STORE', ','.join(uids), '+FLAGS', '\SEEN')
        assert typ == 'OK'


def get_headers(mailbox):
    typ, _ = M.select(mailbox)
    assert typ == 'OK'

    typ, data = M.search(None, 'ALL')
    assert typ == 'OK'

    for num in data[0].split():
        typ, msg_data = M.fetch(num, '(BODY.PEEK[HEADER])')
        assert typ == 'OK'

        for response_part in msg_data:
            if isinstance(response_part, tuple):
                part = response_part[1].decode('utf-8')
                msg = email.message_from_string(part)
                yield msg


IMAP_HOST='mail.bl0rg.net'


M = imaplib.IMAP4(IMAP_HOST)
M.starttls()
login, _, password = netrc().authenticators(IMAP_HOST)
M.login(login, password)


if 'INBOX.Archive' in folders():
    print('INBOX.Archive should not exist')
if number('INBOX.Archives') > 0:
    print('INBOX.Archives should be empty')

current_archives = time.strftime('INBOX.Archives.%Y')
move_all('INBOX.Sent', current_archives)

for f in folders():
    if f.startswith('INBOX.Archives'):
        mark_all_read(f)

mark_all_read('INBOX.spam.train.spam')
mark_all_read('INBOX.spam.train.ham')

if random.random() < 0.05:  # Runs for a few minutes, so only occasionally
    for f in folders():
        m = re.match(r'^INBOX.Archives.(\d+)$', f)
        if not m:
            continue
        year = int(m.group(1))

        for h in get_headers('INBOX.Archives.{}'.format(year)):
            if time.localtime(time.mktime(email.utils.parsedate(h['Date']))).tm_year != year:
                print('{} contains at least one mail from the wrong year'.format(f))
                break


M.logout()
